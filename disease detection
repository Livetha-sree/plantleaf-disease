# -*- coding: utf-8 -*-
"""Plant Leaf Disease Classificatiob.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jtuQ1LOJnGYooZlmlfndg5-93BLJ1Idg
"""

from google.colab import drive
drive.mount('/content/drive')

!git clone https://github.com/spMohanty/PlantVillage-Dataset.git

!pip install tensorflow
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D
from tensorflow.keras.optimizers import Adam
import os

data_dir = '/content/PlantVillage-Dataset/raw/color'
train_datagen = ImageDataGenerator(
    rescale=1.0/255,
    rotation_range=30,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    validation_split=0.2  # 20% for validation
)

train_generator = train_datagen.flow_from_directory(
    data_dir,
    target_size=(224, 224),
    batch_size=32,
    class_mode='categorical',
    subset='training'
)

val_generator = train_datagen.flow_from_directory(
    data_dir,
    target_size=(224, 224),
    batch_size=32,
    class_mode='categorical',
    subset='validation'
)

# Load MobileNetV2 as base model
base_model = MobileNetV2(weights='imagenet', include_top=False, input_shape=(224, 224, 3))
x = base_model.output
x = GlobalAveragePooling2D()(x)
x = Dense(128, activation='relu')(x)
predictions = Dense(train_generator.num_classes, activation='softmax')(x)
model = Model(inputs=base_model.input, outputs=predictions)
for layer in base_model.layers:
    layer.trainable = False
model.compile(optimizer=Adam(learning_rate=0.001), loss='categorical_crossentropy', metrics=['accuracy'])

history = model.fit(
    train_generator,
    validation_data=val_generator,
    epochs=3,
    steps_per_epoch=train_generator.samples // 32,
    validation_steps=val_generator.samples // 32
)

for layer in base_model.layers:
    layer.trainable = True
model.compile(optimizer=Adam(learning_rate=1e-5), loss='categorical_crossentropy', metrics=['accuracy'])
history_finetune = model.fit(
    train_generator,
    validation_data=val_generator,
    epochs=2,
    steps_per_epoch=train_generator.samples // 32,
    validation_steps=val_generator.samples // 32
)

model.save('/content/drive/MyDrive/plant_disease_model.h5')

from tensorflow.keras.preprocessing import image
import numpy as np
model = tf.keras.models.load_model('/content/drive/MyDrive/plant_disease_model.h5')

from google.colab import files
uploaded = files.upload()

img_path = list(uploaded.keys())[0]
img = image.load_img(img_path, target_size=(224, 224))
img_array = image.img_to_array(img) / 255.0  # Normalize
img_array = np.expand_dims(img_array, axis=0)

predictions = model.predict(img_array)
predicted_class = np.argmax(predictions[0])
class_indices = train_generator.class_indices
labels = dict((v, k) for k, v in class_indices.items())
print(f"Predicted Class: {labels[predicted_class]}")



from tensorflow.keras.preprocessing import image
import numpy as np
model = tf.keras.models.load_model('/content/drive/MyDrive/plant_disease_model.h5')

from google.colab import files
uploaded = files.upload()

img_path = list(uploaded.keys())[0]
img = image.load_img(img_path, target_size=(224, 224))
img_array = image.img_to_array(img) / 255.0  # Normalize
img_array = np.expand_dims(img_array, axis=0)

predictions = model.predict(img_array)
predicted_class = np.argmax(predictions[0])
class_indices = train_generator.class_indices
labels = dict((v, k) for k, v in class_indices.items())
print(f"Predicted Class: {labels[predicted_class]}")

from tensorflow.keras.preprocessing import image
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image

model = tf.keras.models.load_model('/content/drive/MyDrive/plant_disease_model.h5')

from google.colab import files
uploaded = files.upload()

img_path = list(uploaded.keys())[0]
img = image.load_img(img_path, target_size=(224, 224))
img_array = image.img_to_array(img) / 255.0  # Normalize
img_array = np.expand_dims(img_array, axis=0)

predictions = model.predict(img_array)
predicted_class = np.argmax(predictions[0])

class_indices = train_generator.class_indices
labels = dict((v, k) for k, v in class_indices.items())

plt.imshow(Image.open(img_path))
plt.axis('off')
plt.title(f"Predicted Class: {labels[predicted_class]}")
plt.show()

from google.colab import files
uploaded = files.upload()

img_path = list(uploaded.keys())[0]
img = image.load_img(img_path, target_size=(224, 224))
img_array = image.img_to_array(img) / 255.0  # Normalize
img_array = np.expand_dims(img_array, axis=0)

predictions = model.predict(img_array)
predicted_class = np.argmax(predictions[0])

class_indices = train_generator.class_indices
labels = dict((v, k) for k, v in class_indices.items())

plt.imshow(Image.open(img_path))
plt.axis('off')
plt.title(f"Predicted Class: {labels[predicted_class]}")
plt.show()

from google.colab import files
uploaded = files.upload()

img_path = list(uploaded.keys())[0]
img = image.load_img(img_path, target_size=(224, 224))
img_array = image.img_to_array(img) / 255.0  # Normalize
img_array = np.expand_dims(img_array, axis=0)

predictions = model.predict(img_array)
predicted_class = np.argmax(predictions[0])

class_indices = train_generator.class_indices
labels = dict((v, k) for k, v in class_indices.items())

plt.imshow(Image.open(img_path))
plt.axis('off')
plt.title(f"Predicted Class: {labels[predicted_class]}")
plt.show()

from google.colab import files
uploaded = files.upload()

img_path = list(uploaded.keys())[0]
img = image.load_img(img_path, target_size=(224, 224))
img_array = image.img_to_array(img) / 255.0  # Normalize
img_array = np.expand_dims(img_array, axis=0)

predictions = model.predict(img_array)
predicted_class = np.argmax(predictions[0])

class_indices = train_generator.class_indices
labels = dict((v, k) for k, v in class_indices.items())

plt.imshow(Image.open(img_path))
plt.axis('off')
plt.title(f"Predicted Class: {labels[predicted_class]}")
plt.show()

from google.colab import files
uploaded = files.upload()

img_path = list(uploaded.keys())[0]
img = image.load_img(img_path, target_size=(224, 224))
img_array = image.img_to_array(img) / 255.0  # Normalize
img_array = np.expand_dims(img_array, axis=0)

predictions = model.predict(img_array)
predicted_class = np.argmax(predictions[0])

class_indices = train_generator.class_indices
labels = dict((v, k) for k, v in class_indices.items())

plt.imshow(Image.open(img_path))
plt.axis('off')
plt.title(f"Predicted Class: {labels[predicted_class]}")
plt.show()
